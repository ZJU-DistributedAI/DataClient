// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "Data Client": Application Contexts
//
// Command:
// $ goagen
// --design=DataClient/design
// --out=$(GOPATH)\src\DataClient
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// AddDataClientContext provides the DataClient add action context.
type AddDataClientContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Hash string
}

// NewAddDataClientContext parses the incoming request URL and body, performs validations and creates the
// context used by the DataClient controller add action.
func NewAddDataClientContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddDataClientContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddDataClientContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramHash := req.Params["hash"]
	if len(paramHash) > 0 {
		rawHash := paramHash[0]
		rctx.Hash = rawHash
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddDataClientContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "plain/text")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AddDataClientContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DelDataClientContext provides the DataClient del action context.
type DelDataClientContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Hash string
}

// NewDelDataClientContext parses the incoming request URL and body, performs validations and creates the
// context used by the DataClient controller del action.
func NewDelDataClientContext(ctx context.Context, r *http.Request, service *goa.Service) (*DelDataClientContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DelDataClientContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramHash := req.Params["hash"]
	if len(paramHash) > 0 {
		rawHash := paramHash[0]
		rctx.Hash = rawHash
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DelDataClientContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "plain/text")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DelDataClientContext) InternalServerError(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}
